<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAAACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAEBhwABgQ/wAAANgAAAC4AAAAmAAAAKAAAACoAAAAsAAAAMAAAADIADBA0ABAGP8AKAD/ACAA
        /wAYAP8AEAD/AAAA/wAAACgAQFD/AEAI/wA4AP8AUDD/AEgg/wAAAHgAABAgAFBQ/wAwAP8AKCjIAEBg
        6AA4WOAAQGj/AGCI/wAoGNAAGCBYAEhA/wAYKFgASHD/ADBAuABAIP8AAABwABggYAAoCP8AAABQAAAQ
        KABISP8AAAA4AAA4AAAAKAAAEEAYACiQaAAAIAAAICigADgI/wAAABgAABAAABBQAAAAUAAAADAQACiw
        SAAYmAAAEGAAAAAYAAAASAAAEFgAABhgAAAACAAAMCD/AAAwIAAoiJAAIJBQAACoKAAAsDgAAHAAAAB4
        AAAAkBgAAEAAAADIQAAY4GgAQOiwAEjI0AAYmCAAGHgQAAAIoAAAAGgAAGAoAACwEAAAuCgAADAAAABo
        AAAgiCAAEKAwAFDo4AB4//8AKGiIAABQEAAAWAAAAABAABAA+AAQAPAAAAAQAACIEAAAeBgAAHgQABBI
        AAAomCAAIHg4ABhoEAAAYAAAGJhAAFj4/wBIuOAAAFgQAAAA0AAAOBAAEHgAABioIAAYoBgAAJgAACC4
        aABAuLgAAKBIAABIEAAQANgAEHAAAABwEAAAuDgAEJhYAADAWAAAWCgAAChIAAAIuAAAOBgAAKAQAACg
        IAAAkAAAAFgYAAAAkAAAACAAAOBgAACIOAAAaBAAAHg4AAA4SAAAiEgAAEgYABBAKAAYkFgAAJAgAAAA
        8AAAGCgAAChAAAAAiABIGP8AQJD/AAC4IAAAoDAAIKBYAACoQAA4GP8AKBD/AAAA6ABQIP8AYHj/ABig
        aAAAoAAAAMgoACCIUAAYqDgAEFgQABAYWABgaP8AaGj/AFhI/wBQKP8AWDj/AHCg/wAwcKgAAHAYAACg
        GAAYcAAAUNj/AEDowAAAeCAAALBIAEBg4ABgmP8AYLD/AGCg/wAQMFgAONjIAED40AAguFgAAMBAAABo
        IAAAaBgAANBYACiwaAAQsFgAAKggAACIMAAQkBAAUOD4AACYMAAA0GgAMMh4ABh4WABg+P8AAEggAADw
        kAAwqHAAQLDAAABIOAAYoEAAEJgoAACIGABY6P8AEHAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQIDCQUHCAQJCnEEAAAAAAAAAAAAAAAAAAAAAAAAAAAACwwNDQ4P
        DxAQERESAAAAAAAAAAAAAAAAAAAAAAAAAAAAExQVFBYWFhYXFRgAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ
        GhscHR0dHh8gIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiIxgAAAAAACQlAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAmJygAAAAAACkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATKisAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACwtDy4AAAAAAAAAAAAAAAAAAAAvMAAxMjMAAAAAAAAAADQ1ETYAAAAAAAAAAAAAAAA3
        ODk3ADo7PD0+Lz9AQS83QkMOcQBERUZHSDlJSkswN0xMMAAAAE1OT1BCPlFSQgAAUw4OVAAAVVZXWFlZ
        NwBMWj8wQgAASFtcXV4AX2AAAABhEA1iZAAAWGVmZz4AAGhpamtYAABYbG1ubwBCcAAAADYDDQ5UAAAA
        AFhKQgAAcnN0dVgAAFhsdnd4AAB5egAAEgMbG3sAMHx9PgAAAAAAPi8zAAAATFhZfn8AADeAgTqCgw0b
        KoQvWIWGAAAAAAAAAAAAAAA5YC+HiAWKAIaLjI2MjY6PkGBZkZIAAAAAAAAAAAAAAJOUP1hsCJVUlpeJ
        B5UNmZqbnI2UNwAAAAAAAAAAAAAAnZ5MaD8Sn6ARlZUPG6KjpKWmbDMAAAAAAAAAAAAAAACnqFipeQCq
        q6ytrq+ssLEzsrO0PgAAAAAAAAAAAAAAALW2t4i4AAAsHbq7vCW9Pz8zPkwAAAAAAAAAAAAAAAAAvr/A
        ecEAAAAAAMLDAABsSWwwQgAAAAAAAAAAAAAAAADETsXCxgAAAAAAPj8ATLPHSUlCAAAAAAAAAAAAAAAA
        AMjJSqfYAAAAAAAAAABZy8zNzgAAAAAAAAAAAAAAAAAAWDpHwc4AAAAAAAAAAEtspM+XAAAAAAAAAAAA
        AAAAAABJN9DRngAAAAAAAAAAYD3S0wAAAAAAAAAAAAAAAAAAADlZWMh5AAAAAAAAAABYzc/UAAAAAAAA
        AAAAAAAAAAAA1dZbWNcAAAAAAAAAANTP2AAAAAAAAAAAAAAAAABCQqlPwDxZfT8zQgAAAAAA0G5eAAAA
        AAAAAAAAAAAAADc3MJJYPi83M9A3AAAAAABC2QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABC
        AAAAAAAAAAAAAP//////8AD//+AAf//wAH//8AB///gAf//8HH///g7///8H/+R/A//EGAIAhAAAAAYA
        wAEGAMCBBgBAgwYEAAeOAAAH/gAAB/4AAA/+AAAP/gAAH/4EAB/+Bwgf/geQP/4H8D/+B/B//gfwf/4H
        8P/4APD/8ADx//AB8f////v/CgoKCiAKCgo=
</value>
  </data>
</root>